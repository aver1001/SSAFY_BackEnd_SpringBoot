//관광지 정보를 저장하는 object
let sidoArr = [];
// 카카오지도
const mapContainer = document.getElementById("map"); // 지도를 표시할 div
const mapOption = {
	center: new kakao.maps.LatLng(37.500613, 127.036431), // 지도의 중심좌표
	level: 5, // 지도의 확대 레벨
};
// 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다
const map = new kakao.maps.Map(mapContainer, mapOption);
let positions; // marker 배열.
let markers = [];
async function getData() {
	//서버에서 시도 데이터를 받아온다.
	let responseData;
	try {
		const response =
			await fetch("attraction/getSido", { method: "POST", body : JSON.stringify({sign:"getSido"}),headers: {
	            "Content-Type": "application/json;charset=utf-8",
	        }});
		if (!response.ok) throw new Error(`${response.status} : 비 정상적인 접근입니다.`); //response ok?
		responseData = await response.json();
		if (!responseData.ok) throw new Error(`${response.status} : ${responseData.error}`);

		//시도 데이터가 존재하는 상황이면 gugunData를 가져와서 sido의 각 key의 value에 적용한다.
		makeSiDoOption(JSON.parse(responseData.location));
	} catch (error) {
		//processError(error);
	}
}

//특정 시/도 선택시 그에 맞는 구들을 option에서 보여준다.
document
	.querySelector("#search-area")
	.addEventListener("change", async(e) => {
		const sido_code = e.target.value;
		const el = document.querySelector("#search-area-gu");
		const htmlArr = [];
		htmlArr.push(
			`<option value="0" selected>검색 할 지역 선택</option>`
		);
		const data = sido_code;
		// 1. api request to get gu gun data by curCode(sido_code)
		const response = await fetch("attraction/getGugun", {
			method : "POST",
			body : JSON.stringify(data)
			,headers: {
	            "Content-Type": "application/json;charset=utf-8",
	        }
		});
		const responseData = await response.json();
		const locationData = JSON.parse(responseData.location);
		locationData.forEach((curGugun) => {
			const { gugun_code, gugun_name } = curGugun;
			htmlArr.push(`<option value="${gugun_code}">${gugun_name}</option>`);
		});
		el.innerHTML = htmlArr.join("");
	});


function makeSiDoOption(data) {
	let sel = document.getElementById("search-area");

	data.forEach((curData) => {
		let opt = document.createElement("option");
		opt.setAttribute("value", curData["sido_code"]);
		opt.appendChild(document.createTextNode(curData["sido_name"]));
		sel.appendChild(opt);
		sidoArr.push(curData["sido_code"]);
	});
}

getData();

document.getElementById("btn-search").addEventListener("click", async() => {
	/*
	 1. 검색 url을 만든다.
	 */
	// 서버 url 상의 필요
	let searchRequestObj = {};
	let sidoCode = document.getElementById("search-area").value;
	let gugunCode = document.querySelector("#search-area-gu").value;
	let searchContentId =
		document.getElementById("search-content-id").value;

	//시도의 값 유무 체크
	if (parseInt(sidoCode) && parseInt(sidoCode) !== 0) {
		searchRequestObj["sido_code"] = sidoCode;
	} else {
		alert("시/도를 설정해주세요");
		return;
	}

	//구군의 값 유무 체크
	if (parseInt(gugunCode) && parseInt(gugunCode) !== 0) {
		searchRequestObj["gugun_code"] = gugunCode;
	} else {
		alert("구/군을 설정해주세요");
		return;
	}

	//콘텐츠 id 값 유무 체크 => 콘텐츠의 경우 선택항목이기 때문에 없더라도 제약 없음.
	searchRequestObj["searchContentId"] = (parseInt(searchContentId) && parseInt(gugunCode) !== 0) ? searchContentId : 0;

	/*
	 1. 검색 url을 만들고, request이후, 받은 정보를 이용해 지도에 마커를 찍는다.
	 */

	try {
		const response = await fetch("attraction/getAttractionInfoList", {
			method: "POST", body : JSON.stringify({
				sign : "getAttractionInfoList",
				...searchRequestObj
			}),headers: {
	            "Content-Type": "application/json;charset=utf-8",
	        }
		});
		//if(!response.ok) throw new Error(`${response.status} : 비 정상적인 접근입니다.`);
		const responseData = await response.json();
		//if (!responseData.ok) throw new Error(`${response.status} : ${responseData.error}`);
		const attractionData = JSON.parse(responseData.attraction);
		displayMarker(attractionData);
	} catch (error) {
		throw error;
	}
});


function displayMarker(datas) {
	// 맵에 마커를 그립니다.
	//기존 table data 제거
	document.querySelector("table").style.display = "none";
	document.getElementById("trip-list").innerHTML = "";
	positions = [];

	if(markers.length > 0){
		console.log("delete!!!");
		markers.forEach((curMarker) => {
			curMarker.setMap(null);
		})
	}
	markers = [];

	if (datas.length === 0) {
		alert("검색 결과가 존재하지 않습니다!");
		return;
	}

	//position을 완성함. 내부에는, 제목, 위치 객체, 콘텐츠 id가 들어감.
	datas.forEach((curData) => {
		let markerInfo = {
			title: curData.title,
			latlng: new kakao.maps.LatLng(curData.latitude, curData.longitude),
			contentTypeId: curData.content_type_id,
		};
		positions.push(markerInfo);
	});

	for (let i = 0; i < positions.length; i++) {
		// 마커 이미지의 이미지 크기 입니다
		let imageSize = new kakao.maps.Size(35, 35);

		// 마커 이미지를 생성합니다. contentTypeId을 활용해 폴더에서 가져옵니다.
		let markerImage = new kakao.maps.MarkerImage(
			`./images/marker/fin${positions[i].contentTypeId}.png`,
			imageSize
		);

		// 마커를 생성합니다
		let marker = new kakao.maps.Marker({
			map: map, // 마커를 표시할 지도
			position: positions[i].latlng, // 마커를 표시할 위치
			title: positions[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다
			image: markerImage, // 마커 이미지
		});
		markers.push(marker);
		marker.setMap(map);
		kakao.maps.event.addListener(marker, "click", function() {
			//기존 table data 제거
			console.log(marker.getTitle());
			document.getElementById("trip-list").innerHTML = "";

			//맵 하단에 현재 선택한 관광지의 정보를 보여줍니다.
			document.querySelector("table").setAttribute("style", "display: ;");
			const curMarkerData = datas.filter((curData) => curData.title === marker.getTitle());

			document.getElementById("trip-list").innerHTML = `
              <tr onclick="moveCenter(${curMarkerData[0].latitude}, ${curMarkerData[0].longitude});">
                <td><img src="${curMarkerData[0].first_image}" width="100px"></td>
                <td>${curMarkerData[0].title}</td>
                <td>${curMarkerData[0].addr1} ${curMarkerData[0].addr2}</td>
                <td>${curMarkerData[0].description}</td>
                <td>${curMarkerData[0].latitude}</td>
                <td>${curMarkerData[0].longitude}</td>
              </tr>`;
		});
	}
	console.log(markers.length);
	// 첫번째 검색 정보를 이용하여 지도 중심을 이동 시킵니다
	map.setCenter(positions[0].latlng);
}

function moveCenter(lat, lng) {
	map.setCenter(new kakao.maps.LatLng(lat, lng));
}

/*
// 마커에 커서가 오버됐을 때 마커 위에 표시할 인포윈도우를 생성합니다
var iwContent = ""; //'<div style="padding:5px;">Hello World!</div>'; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다

// 인포윈도우를 생성합니다
var infowindow;


new kakao.maps.InfoWindow({
  content: iwContent,
});


// 마커에 마우스오버 이벤트를 등록합니다
kakao.maps.event.addListener(marker, "mouseover", function() {
	// 마커에 마우스오버 이벤트가 발생하면 인포윈도우를 마커위에 표시합니다
	infowindow.open(map, marker);
});

// 마커에 마우스아웃 이벤트를 등록합니다
kakao.maps.event.addListener(marker, "mouseout", function() {
	// 마커에 마우스아웃 이벤트가 발생하면 인포윈도우를 제거합니다
	infowindow.close();
});
*/