let userData, sidoData, gugunData;


async function setMyprofile() {
	//사용자 정보 받기
	try {
		const userResponse = await fetch("member/getUser", { method: 'POST', body : JSON.stringify({sign : "getUser"}),headers: {
            "Content-Type": "application/json;charset=utf-8",
        }});
		userResponseData = await userResponse.json();
		userData = JSON.parse(userResponseData.user);
	} catch (e) {
		alert("사용자 정보 받기에 실패했습니다. 다시, 새로고침 해주세요");
		return;
	}

	//시/도 데이터 받기
	try {
		const response =
			await fetch("attraction/getSido", { method: "POST", body : JSON.stringify({sign:"getSido"}),headers: {
	            "Content-Type": "application/json;charset=utf-8",
	        }});
		if (!response.ok) throw new Error(`${response.status} : 비 정상적인 접근입니다.`); //response ok?
		responseData = await response.json();
		if (!responseData.ok) throw new Error(`${response.status} : ${responseData.error}`);

		sidoData = JSON.parse(responseData.location);
	} catch (e) {
		alert("시/도 데이터를 불러오지 못했습니다. 다시, 새로고침 해주세요.");
		return;
	}

	//sido코드 클릭 시, gugun정보를 받아옴
	document.querySelector("#sido").innerHTML = `<option value="0">검색 할 지역 선택</option>` +
		(sidoData.map((curSido) => `<option value="${curSido.sido_code}" ${curSido.sido_code == userData.sido_code ? "selected" : ""}>${curSido.sido_name}</option>`).join(""));
 	let data = userData.sido_code;
	const curGugunResponse = await fetch("attraction/getGugun", {
		method : "POST",
		body : JSON.stringify(data)
		,headers: {
            "Content-Type": "application/json;charset=utf-8",
        }
	});
	const curGugunResponseData = await curGugunResponse.json();
	const curGugunData = JSON.parse(curGugunResponseData.location);

	document.querySelector("#gugun").innerHTML = `<option value="0">검색할 지역 선택</option>` + (curGugunData.map((curData)=>
		`<option value="${curData.gugun_code}" ${curData.gugun_code == userData.gugun_code ? "selected" : ""}>${curData.gugun_name}</option>`
	).join(""));



	//id, name, password, emailId, emailDomain초기값 설정
	for (const [key, val] of Object.entries(userData)) {
		if(key === "email"){
			const arr = val.split("@");
			document.querySelector(`#emailId`).value = arr[0];
			document.querySelector(`#emailDomain`).value = arr[1];
		}else if(key !== "sido_code" && key !== "gugun_code"){
			document.querySelector(`#${key}`).value = `${val}`;
		}
	}

	document
		.querySelector("#sido")
		.addEventListener("change", async(e) => {
			const curCode = e.target.value;
			const el = document.querySelector("#gugun");
			const htmlArr = [];
			htmlArr.push(
				`<option value="0" selected>검색 할 지역 선택</option>`
			);
			// 1. api request to get gu gun data by curCode(sido_code)
			const response = await fetch("attraction", {
				method : "POST",
				body : JSON.stringify({sign : "getGugun", sido_code : curCode})
			});
			const responseData = await response.json();
			const locationData = JSON.parse(responseData.location);
			locationData.forEach((curGugun) => {
				const { gugun_code, gugun_name } = curGugun;
				htmlArr.push(`<option value="${gugun_code}">${gugun_name}</option>`);
			});
			el.innerHTML = htmlArr.join("");
		});
}

//유저 정보를 수정하는 function => 사실상, 회원 가입과 로직은 거의 동일함.
async function memberModify() {
	const id = document.querySelector("#id").value;
	const pw = document.querySelector("#pw").value;
	const name = document.querySelector("#name").value;

	const emailid = document.querySelector("#emailId").value;
	const emaildomain = document.querySelector("#emailDomain").value;
	const email = `${emailid}@${emaildomain}`;

	const sido_code = document.querySelector("#sido").value;
	const gugun_code = document.querySelector("#gugun").value;
	const dataObj = { id, pw, name, email, sido_code, gugun_code };

	// 유효성 검사
	if (checkBlank(dataObj) !== null) {
		return;
	} else if (!validateRegexEmail(email)) {
		alert("올바른 이메일을 입력해주세요.");
		return;
	}

	const data = { sign: "memberModify", ...dataObj };
	await fetch("member/memberModify", { method: 'POST', body: JSON.stringify(data),headers: {
        "Content-Type": "application/json;charset=utf-8",
    } });
	location.reload();
}

function checkBlank(obj) {
	for (const [key, val] of Object.entries(obj)) {
		if (val.length === 0) {
			alert(`${key}을(를) 제대로 입력해주세요.`)
			return key;
		}
	};
	return null;
}

function validateRegexEmail(email) {
	const reg = /^.+@.{2,}..{2,}$/;
	return reg.test(email);
}

function validateRegexPassword(password) {
	const reg =
		/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@$!%*?&])[A-Za-z\d$@$!%*?&]{8,}/;
	return reg.test(password);
}

// 회원 탈퇴하는 함수.
async function memberWithdrawal() {
	try {
		await fetch("member/memberDelete", { method: "POST", body: JSON.stringify({ sign: "memberDelete", id: userData.id }),headers: {
            "Content-Type": "application/json;charset=utf-8",
        } });
		//쿠키 삭제 후, 메인 페이지로 이동
		$.removeCookie("name");
		location.replace("index.html");
	} catch (e) {
		alert("회원 탈퇴에 실패했습니다. 관리처에 문의해주세요");
	}

}

document.querySelector(".contact-form").addEventListener("submit", memberModify);

//setMyprofile은 무조건 새로고침 시 1회 실행됨.
setMyprofile();